apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "io.github.a0gajun.weather"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

}

ext {
    // Android
    supportLibraryVersion = '25.1.0'
    recyclerViewVersion = '25.1.0'

    // Libraries
    daggerVersion = '2.8'
    rxAndroidVersion = '1.2.1'
    rxJavaVersion = '1.2.4'
    retrofitVersion = '2.1.0'
    gsonVersion = '2.8.0'
    eventBusVersion = '3.0.0'
    okHttpVersion = '3.5.0'
    threeTenAbpVersion = '1.0.4'
    glideVersion = '3.7.0'
    glideTransformationVersion = '2.0.1'

    // Develop
    timberVersion = '4.4.0'
    leakCanaryVersion = '1.5'

    // Testing
    mockitoVersion = '2.5.5'
    robolectricVersion = '3.2.1'

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    ///////////////
    // Libraries //
    ///////////////

    // Support Library
    compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
    compile "com.android.support:recyclerview-v7:${recyclerViewVersion}"
    // Dagger : DI library
    compile "com.google.dagger:dagger:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    // RxAndroid : Functional Reactive programming library
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    compile "io.reactivex:rxjava:${rxJavaVersion}"
    // Retrofit : REST library
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    // OkHttp : Networking library
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    // gson : json conversion library
    compile "com.google.code.gson:gson:${gsonVersion}"
    // Timber : logging library
    compile "com.jakewharton.timber:timber:${timberVersion}"
    // Eventbus
    compile "org.greenrobot:eventbus:${eventBusVersion}"
    // ThreeTenABP : JSR-310 backport for android
    compile "com.jakewharton.threetenabp:threetenabp:${threeTenAbpVersion}"
    // Glide : Image loading framework
    compile "com.github.bumptech.glide:glide:${glideVersion}"
    compile "jp.wasabeef:glide-transformations:${glideTransformationVersion}"

    // LeakCanary : memory leak detection
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"


    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.robolectric:robolectric:${robolectricVersion}"
}

// Dagger workaround
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}
